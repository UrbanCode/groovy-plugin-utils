['groovy', 'maven', 'signing', 'io.codearte.nexus-staging'].each {
    apply plugin: it
}
defaultTasks 'clean', 'jar', 'copyDocs'

group = 'com.ibm.urbancode.plugins'
archivesBaseName = 'groovy-plugin-utils'
// Use -Psnapshot=false to produce new releases
version = '1.3' + ((hasProperty('snapshot') && snapshot == 'false') ? '' : '-SNAPSHOT')

jar.archiveName "${archivesBaseName}-${version}.jar"

def username = hasProperty('ossrhUsername') ? ossrhUsername : ''
def password = hasProperty('ossrhPassword') ? ossrhPassword : ''

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.7'
    implementation 'com.google.code.gson:gson:2.8.9'
}

/*
 * Uploading artifacts requires properties be defined in $GRADLE_USER_HOME/gradle.properties. $GRADLE_USER_HOME defaults to $USER_HOME/.gradle
 * ossrhUsername=your-jira-id
 * ossrhPassword=your-jira-password
 * See: http://central.sonatype.org/pages/gradle.html
 * Then follow: http://central.sonatype.org/pages/releasing-the-deployment.html
 */
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: username, password: password)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: username, password: password)
            }

            pom.project {
                name "${group}:${archivesBaseName}"
                description 'A set of utility scripts that can be used in community plugins on GitHub.'
                url 'https://github.com/IBM-UrbanCode/groovy-plugin-utils'
                licenses {
                    license {
                        name 'Eclipse Public License, Version 1.0'
                        url 'https://www.eclipse.org/legal/epl-v10.html'
                    }
                }
                developers {
                    developer {
                        name 'Nicholas Mathison'
                        email 'nhmathis@us.ibm.com'
                        organization 'IBM'
                        organizationUrl 'http://www.ibm.com'
                    }
                }
                scm {
                    connection 'scm:git:https://github.com/IBM-UrbanCode/groovy-plugin-utils.git'
                    developerConnection 'scm:git:https://github.com/IBM-UrbanCode/groovy-plugin-utils.git'
                    url 'https://github.com/IBM-UrbanCode/groovy-plugin-utils'
                }
            }
        }
    }
}

// Creates a ${archivesBaseName}-${version}-sources.jar file that contains all Groovy and Java source files
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.groovy
}

// Creates a ${archivesBaseName}-${version}-javadoc.jar file that contains JavaDoc for all source files
task groovyDocJar(type: Jar) {
    classifier = 'javadoc'
    from groovydoc
}

// Copy the source into the build jar directory
jar {
    dependsOn 'copyGroovy'
}

// Change the Groovy Compile output directory to not combine in final Jar build folder
compileGroovy {
    destinationDir = file('build/tmp/groovyClasses')
}

task copyGroovy(type:Copy) {
    from sourceSets.main.groovy
    into 'build/classes/main'
}

artifacts {
    archives jar, sourcesJar, groovyDocJar
}

/**
 * Signing requires that the following properties be defined in $GRADLE_USER_HOME/gradle.properties. $GRADLE_USER_HOME defaults to $USER_HOME/.gradle
 * signing.keyId=YourKeyId
 * signing.password=YourPublicKeyPassword
 * signing.secretKeyRingFile=PathToYourKeyRingFile
 * See http://www.gradle.org/docs/current/userguide/signing_plugin.html
 */
signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task copyDocs(type: Copy) {
    from groovydoc
    into('docs')
}


/**
 * Deploy to Sonatype Nexus
 * Run: gradle closeAndPromoteRepository
 * See: https://github.com/Codearte/gradle-nexus-staging-plugin/
 * ossrhUsername and ossrhPassword are taken from gradle.properties
 */
// Add the gradle nexus staging plugin
// See: https://github.com/Codearte/gradle-nexus-staging-plugin/
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    }
}

// Configure the nexus staging plugin
nexusStaging {
    packageGroup = "com.ibm.urbancode.plugins" //optional if packageGroup == project.getGroup()
}
